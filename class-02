-- 1.1
-- Написать функцию, которая разбивает промежуток времени в секундах на часы, минуты и секунды.
-- Результат возвращать в виде кортежа из трёх элементов. Реализовать также обратное преобразование.
sec2hms :: Int -> (Int, Int, Int)
sec2hms time = (\(h, s) -> (h, time `div` 60 - h * 60, s)) $ (time `div` 3600, time `mod` 60)

hms2sec :: (Int, Int, Int) -> Int
hms2sec (h, m, s) = 3600 * h + 60 * m + s
-- Реализовать с помощью hms2sec (здесь параметры заданы по отдельности)
hms2sec' :: Int -> Int -> Int -> Int
hms2sec' h m s = 3600 * h + 60 * m + s
-- должно быть True
test1 = and $ map (\x -> x == hms2sec (sec2hms x)) [1,10..10000]
-- 1.2
-- Написать функции, вычисляющие
-- а) длину отрезка по координатам его концов;
-- б) периметр и площадь треугольника по координатам вершин.
type Point = (Double, Double)

distance :: Point -> Point -> Double
distance (x1, y1) (x2, y2) = sqrt((x1 - x2)^2 + (y1 - y2)^2)

triangle :: Point -> Point -> Point -> (Double, Double)
triangle (x1, y1) (x2, y2) (x3, y3) = (p, s)
	where
		p = distance (x1, y1) (x2, y2) + distance (x2, y2) (x3, y3) + distance (x3, y3) (x1, y1)
		s = 0.5 * ((x1 - x3) * (y2 - y3) - (x2 - x3) * (y1 - y3))
-- Во всех следующих заданиях использование стандартных функций обработки списков не допускается.
-- Все решения должны реализовываться рекурсивными функциями.
-- 2.1
-- Определить рекурсивную функцию, определяющую количество чётных элементов списка
nEven :: Integral a => [a] -> Int
nEven [] = 0
nEven (x:xs)
	| x `mod` 2 == 0 = 1 + nEven xs
	| otherwise = nEven xs
-- 2.2
-- Увеличить все элементы заданного списка в два раза.
-- Указание: в решении может понадобиться операция конструирования списка:
-- > 1 : [2,3,4]
-- [1,2,3,4]
doubleElems :: Num a => [a] -> [a]
doubleElems [] = []
doubleElems (x:xs) = (x * 2): doubleElems xs
-- 2.3
-- Дан список целых чисел. Сформировать новый список, содержащий только нечетные элементы исходного.
fltOdd :: Integral a => [a] -> [a]
fltOdd [] = []
fltOdd (x:xs)
	| x `mod` 2 == 0 = fltOdd xs
	| otherwise = x:fltOdd xs
-- 2.4
-- Написать следующие функции обработки списков:
-- а) удалить все отрицательные элементы;
deleteAllNegative :: [Integer] -> [Integer]
deleteAllNegative [] = []
deleteAllNegative (x:xs)
	| x < 0 = deleteAllNegative xs
	| otherwise = x:deleteAllNegative xs
-- б) увеличить элементы с чётными значениями в два раза;
doubleAllEven :: (Integral a, Num a) => [a] -> [a]
doubleAllEven [] = []
doubleAllEven (x:xs)
	| x `mod` 2 == 0 = (2 * x):doubleAllEven xs
	| otherwise = x:doubleAllEven xs
-- в) переставить местами чётные и нечётные по порядку следования элементы
-- (для списков нечётной длины отбрасывать последний элемент).
shuffleOddAndEven :: [a] -> [a]
shuffleOddAndEven [] =[]
shuffleOddAndEven (x1:x2:xs) = x2:x1:shuffleOddAndEven xs
-- 2.5
-- Даны два списка целых чисел. Сформировать список, каждый элемент которого равен сумме
-- соответствующих элементов исходных списков. Предусмотреть ситуацию списков разной длины.
combine_plus :: [Integer] -> [Integer] -> [Integer]
combine_plus [] ys = ys
combine_plus xs [] = xs
combine_plus (x:xs) (y:ys) = (x + y):combine_plus xs ys
-- 2.6
-- Даны два списка. Сформировать новый список, содержащий пары из соответствующих элементов
-- исходных списков. Хвост более длинного списка отбросить.
twoListsInOne :: [a] -> [b] -> [(a, b)]
twoListsInOne [] x2s = []
twoListsInOne x1s [] = []
twoListsInOne (x1:x1s) (x2:x2s) = (x1, x2):twoListsInOne x1s x2s
-- 2.7
-- Написать функции, которые по заданному n возвращают список, состоящий из n первых натуральных чисел
-- а) в порядке убывания;
listInRightOrder :: Int -> [Int]
listInRightOrder 0 = []
listInRightOrder n = n:listInRightOrder (n - 1)
-- б) в порядке возрастания.
--listInOtherOrder :: Int -> [Int]
--listInOtherOrder 0 = []
--listInOtherOrder n = (listInOtherOrder (n - 1)):n
-- 2.8
-- Дан элемент типа a и список [a]. Вставить между всеми элементами списка заданный элемент.
insertExactElement :: a-> [a] -> [a]
insertExactElement _ [a] = [a]
insertExactElement elem (x1:x2:xs) = x1:elem:insertExactElement elem (x2:xs)
-- 2.9
-- Написать функцию, которая разбивает список на два подсписка: элементы из начала списка,
-- совпадающие с первым элементом, и все остальные элементы.
separateList :: Eq a => [a] -> ([a], [a])
separateList [] = ([], [])
separateList (x:xs) = separateListFunc ([x], xs)
	where
		separateListFunc (s, []) = (s, [])
		separateListFunc ((x1:x1s), (x2:x2s))
			| x1 == x2 = separateListFunc ((x2:x1:x1s), x2s)
			| otherwise = ((x1:x1s), (x2:x2s))
--3
-- Даны типовые аннотации функций. Попытайтесь догадаться, что они делают, и напишите их
-- рекурсивные реализации (если вы можете предложить несколько вариантов, реализуйте все):
-- а) [a] -> Int -> a
-- возвращает елемент массива в позиции a
arrayAt :: [a] -> Int -> a
arrayAt [] pos = error "bad - empty array"
arrayAt (x:xs) pos
	| pos < 0 = error "bad - wrong position"
	| pos == 0 = x
	| otherwise = arrayAt xs (pos - 1)
-- б) Eq a => [a] -> a -> Bool
-- в) [a] -> Int -> [a]
-- удалить элемент из списка
deleteElem :: [a] -> Int -> [a]
deleteElem [] _ = []
deleteElem (x:xs) 0 = xs
deleteElem (x:xs) n = x:deleteElem xs (n - 1)
-- г) a -> Int -> [a]
-- записать в массив n-ое количество чисел a
elementIntoArray :: a -> Int -> [a]
elementIntoArray elem 0 = []
elementIntoArray elem n = elem:elementIntoArray elem (n - 1)
-- д) [a] -> [a] -> [a]
-- объединить два списка
unitLists :: [a] -> [a] -> [a]
unitLists [] x = x
unitLists x [] = x
unitLists (x:xs) (y:ys) = x:y:unitLists xs ys
-- е) Eq a => [a] -> [[a]]
-- ж) [a] -> [(Int, a)]
-- создать список списков по данному (порядковый номер, соответствующий элемент)
createNew :: [a] -> [(Int, a)]
createNew x = createNewEdition (+1) 1 x
createNewEdition :: (Int -> Int) -> Int -> [a] ->[(Int, a)]
createNewEdition _ _ [] = []
createNewEdition f i (x:xs) = (i, x) : createNewEdition f (f i) xs
-- з) Eq a => [a] -> [a]
